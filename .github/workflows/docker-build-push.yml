# 工作流名称
name: CI-CD - Build and Push Docker Image

# 触发工作流的事件
on:
  push:
    tags:
      - 'v*'  # 只在推送 v 开头的标签时触发，如 v1.0.0, v2.1.3
  workflow_dispatch: # 允许手动触发

# 工作流执行的任务
jobs:
  build-and-push:
    # 任务运行的环境
    runs-on: ubuntu-latest

    # 任务执行的步骤
    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 3: 提取元数据（标签和注释）
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/sanqi37/webnote
          tags: |
            # 使用 Git 标签作为 Docker 标签（去掉 v 前缀）
            type=ref,event=tag
            # 生成 latest 标签（仅对最新版本）
            type=raw,value=latest,enable={{is_default_branch}}
            # 生成 major 标签（如 v1.0.0 -> 1）
            type=semver,pattern={{major}}
            # 生成 major.minor 标签（如 v1.0.0 -> 1.0）
            type=semver,pattern={{major}}.{{minor}}

      # 步骤 4: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 构建并推送到 Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

